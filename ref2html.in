#! /usr/bin/env python
#############################################################################
#
# Project:     ref2html
#
# Copyright:   (C) 1999-2018, David Arnold.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#############################################################################
"""
This filter reads a stream of reference labels from stdin, and writes
formatted references to stdout.

"""

#############################################################################

import os, string, sys


#############################################################################
VERSION = "1.1.0"

USAGE = """Usage: %s -p ref-file

Supply a list of references on stdin, and the formatted HTML source
is written to stdout.

"""


#############################################################################

class Reference:
    def __init__(self):
        self._lst_a = []
        self._city = ""
        self._date = ""
        self._issuer = ""
        self._journal = ""
        self._keywords = ""
        self._label = ""
        self._number = ""
        self._other = ""
        self._pages = ""
        self._report = ""
        self._title = ""
        self._volume = ""

    def add_author(self, a):
        self._lst_a.append(a)

    def set_city(self, c):
        self._city = c

    def set_date(self, d):
        self._date = d

    def set_issuer(self, i):
        self._issuer = i

    def set_journal(self, j):
        self._journal = j

    def set_keywords(self, k):
        self._keywords = k

    def set_label(self, l):
        self._label = l

    def set_number(self, n):
        self._number = n

    def set_other(self, o):
        self._other = o

    def set_pages(self, p):
        self._pages = p

    def set_report(self, r):
        self._report = r

    def set_title(self, t):
        self._title = t

    def set_volume(self, v):
        self._volume = v

    def authors(self):
        if len(self._lst_a) == 1:
            return self._lst_a[0]
        elif len(self._lst_a) == 2:
            return self._lst_a[0] + " and " + self._lst_a[1]
        else:
            return reduce(lambda s,a: s+", "+a,
                          self._lst_a[1:-1],
                          self._lst_a[0]) + " and " + self._lst_a[-1]

    def label(self):
        return self._label


    def html(self, fp):

        fp.write("<dt>%s\n" % self._label)
        fp.write("<dd>%s\n" % self.authors())
        fp.write("<dd><i>%s</i>\n" % self._title)

        if self._journal:       #--  journal-article
            fp.write("<dd><i>%s</i>, " % self._journal)

            if self._volume:
                fp.write("<b>%s</b> " % self._volume)

            if self._number:
                fp.write("(%s) " % self._number)

            if self._pages:
                fp.write("pp.&nbsp;%s " % self._pages)

        elif self._report:      #--  tech-report
            if self._issuer:
                fp.write("%s, " % self._issuer)

            fp.write("%s, " % self._report)

        elif self._issuer:      #-- book
            fp.write("%s " % self._issuer)

            if self._other:
                fp.write("%s " % self._other)


        else:                   #-- other
            if self._other:
                fp.write("%s " % self._other)


        if self._date:
            fp.write("(%s).\n" % self._date)

        fp.write("    <p>\n\n")
        return


#############################################################################

def usage(prog, error):
    """Print usage message"""

    m = ""
    if error:
        m = "Error: %s\n\n" % error
        fd = sys.stderr
    else:
        fd = sys.stdout

    m = m + USAGE % prog

    fd.write(m)
    return


#############################################################################

if __name__ == "__main__":

    #-- initialise
    db = {}
    ref_file = ""

    #-- parse command line arguments
    args = sys.argv[1:]

    while args:
        arg = args[0]
        args = args[1:]

        if arg in ("-h", "-H", "-?", "--help"):
            usage(sys.argv[0], None)
            sys.exit(0)

        elif arg in ("-v", "-V", "--version"):
            print VERSION
            sys.exit(0)

        elif arg == "-p":
            if args:
                ref_file = args[0]
                args = args[1:]

            else:
                usage(sys.argv[0], "-p needs bibliography file argument")
                sys.exit(1)

        else:
            usage(sys.argv[0], "Unknown option: %s" % arg)
            sys.exit(1)

    #-- attempt to open the database file
    if not ref_file:
        usage(sys.argv[0], "missing -p parameter")
        sys.exit(1)

    try:
        ref_db = open(ref_file, "r")
    except:
        usage(sys.argv[0], "no such file: %s" % (ref_file))
        sys.exit(1)

    #-- read in the database
    item = Reference()
    idx = 0
    for line in ref_db.readlines():
        idx = idx + 1
        if line[0] == "#":
            continue

        if string.strip(line) == "":
            db[item.label()] = item
            item = Reference()
            continue

        if line[0] != "%":
            sys.stderr.write("format error in database: line %d\n" % idx)
            sys.stderr.write("    %s\n" % (line))
            sys.exit(2)

        v = line[3:-1]
        if line[1] == "A":
            item.add_author(v)
        elif line[1] == "C":
            item.set_city(v)
        elif line[1] == "D":
            item.set_date(v)
        elif line[1] == "I":
            item.set_issuer(v)
        elif line[1] == "J":
            item.set_journal(v)
        elif line[1] == "K":
            item.set_keywords(v)
        elif line[1] == "L":
            item.set_label(v)
        elif line[1] == "N":
            item.set_number(v)
        elif line[1] == "O":
            item.set_other(v)
        elif line[1] == "P":
            item.set_pages(v)
        elif line[1] == "R":
            item.set_report(v)
        elif line[1] == "T":
            item.set_title(v)
        elif line[1] == "V":
            item.set_volume(v)

    ref_db.close()

    #-- process input
    sys.stdout.write("<h2>References</h2>\n\n")

    lst_label = sys.stdin.readlines()

    if lst_label:
        sys.stdout.write("<dl>\n")
        lst_label.sort()

        for label in lst_label:
            if db.has_key(label[:-1]):
                db[label[:-1]].html(sys.stdout)
            else:
                sys.stderr.write("No match for reference: %s\n" % label[:-1])

        sys.stdout.write("</dl>\n\n")


    sys.exit(0)


#############################################################################
